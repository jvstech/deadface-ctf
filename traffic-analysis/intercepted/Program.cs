namespace intercepted
{
  internal class Program
  {
    static byte[] Code = new byte[] { 
      0x46, 0xac, 0x2b, 0x25, 0xf8, 0x3b, 0x48, 0xe7,
      0xec, 0x4d, 0x8f, 0x08, 0xec, 0x82, 0xed, 0x61,
      0x82, 0xf3, 0x93, 0x10, 0x29, 0x64, 0x74, 0xfe,
      0xae, 0x54, 0x56, 0x69, 0x56, 0xb5, 0xcd, 0x32,
      0xb6, 0x91, 0xd9, 0xac, 0xd9, 0xaa, 0x6d, 0x43,
      0x44, 0x20, 0xeb, 0xb2, 0xa6, 0x87, 0xd3, 0x98,
      0x84, 0x91, 0x7a, 0x4f, 0xa9, 0x33, 0x1e, 0xea,
      0x18, 0x90, 0xc2, 0xd4, 0x07, 0x75, 0x38, 0x35,
      0xc3, 0xed, 0x5b, 0x5b, 0x0b, 0x8b, 0xc0, 0xcb,
      0x24, 0x73, 0x5b, 0x2e, 0xdc, 0x1f, 0x02, 0x49,
      0x5b, 0xd1, 0xb0, 0xb8, 0xd2, 0x6b, 0x14, 0xad,
      0xd4, 0xa6, 0x33, 0x42, 0x27, 0x94, 0xe8, 0xcc,
      0x74, 0x8a, 0x62, 0x20, 0x39, 0x62, 0x1f, 0x5f,
      0xc0, 0xde, 0xfd, 0xa4, 0x1a, 0xba, 0x6d, 0xa8,
      0x3f, 0x64, 0x0b, 0x2d, 0xd7, 0x0b, 0xf3, 0x83,
      0x1c, 0xf4, 0x95, 0x8a, 0x40, 0xf4, 0x0e, 0x1e,
      0x0d, 0x15, 0x7d, 0x20, 0xdc, 0x6f, 0xad, 0xbf };

    static int Main(string[] args)
    {
      if (args.Length == 0)
      {
        Console.Error.WriteLine("Usage: intercepted <output bin file>");
        return 1;
      }

      uint xorMask = 0x265617f3;
      using var s = new MemoryStream(Code);
      using BinaryReader r = new(s);
      using BinaryWriter w = new(s);
      for (int i = 0; i < Code.Length; i += 4)
      {
        uint v = r.ReadUInt32();
        unchecked
        {
          v ^= xorMask;
          xorMask += v;
          s.Seek(-4, SeekOrigin.Current);
          w.Write(v);
        }
      }

      File.WriteAllBytes(args[0], Code);
      return 0;
    }
  }
}